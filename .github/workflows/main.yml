name: VPP Feed (RSS-first)

on:
  workflow_dispatch:
  schedule:
    - cron: "0 * * * *"   # 每小时

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Build feed.json (Node18, RSS-only, with logs)
        shell: bash
        run: |
          node - <<'NODE'
          // 仅放“确认有 RSS 的来源”，先确保不为 0，再逐步扩展
          const RSS_SOURCES = [
            // A
            {name:"Next Kraftwerke", bucket:"A", url:"https://www.next-kraftwerke.com/news/feed"},
            {name:"PV Magazine (Markets & Policy)", bucket:"A", url:"https://www.pv-magazine.com/feed/"},
            {name:"Energy Storage News", bucket:"A", url:"https://www.energy-storage.news/feed/"},
            // B（部分平台没有官方 RSS，先略，后续用页面解析慢慢加）
            // C
            {name:"CanalEnergia", bucket:"C", url:"https://www.canalenergia.com.br/feed/"},
            {name:"epbr", bucket:"C", url:"https://epbr.com.br/feed/"},
          ];

          function clean(s){ return (s||"").replace(/<!\[CDATA\[|\]\]>/g,"").replace(/<[^>]+>/g,"").trim(); }
          function pick(s,re){ return ((s||"").match(re)||[])[1] || ""; }
          function parseRSS(xml, limit=100){
            const out=[]; const blocks=xml.match(/<item[\s\S]*?<\/item>|<entry[\s\S]*?<\/entry>/gi)||[];
            for(const b of blocks){
              const title = clean(pick(b,/<title[^>]*>([\s\S]*?)<\/title>/i));
              const link  = pick(b,/<link[^>]*>([\s\S]*?)<\/link>/i) || pick(b,/<link[^>]*href="([^"]+)"/i);
              const date  = pick(b,/<pubDate[^>]*>([\s\S]*?)<\/pubDate>/i) || pick(b,/<updated[^>]*>([\s\S]*?)<\/updated>/i) || pick(b,/<published[^>]*>([\s\S]*?)<\/published>/i);
              if (title && link) out.push({ title, url: link, date: date || new Date().toISOString() });
              if (out.length >= limit) break;
            }
            return out;
          }

          async function tryFetchText(url){
            try{
              const r = await fetch(url, { headers:{'user-agent':'Mozilla/5.0 VPPBot/1.0'} });
              if (!r.ok) { console.log('  ! http', r.status, url); return null; }
              const ct = (r.headers.get('content-type')||'').toLowerCase();
              if (!/xml|rss|atom|text|html/.test(ct)) console.log('  ? content-type', ct, url);
              return await r.text();
            }catch(e){
              console.log('  ! fetch error', e.message, url);
              return null;
            }
          }

          const cutoff = Date.now() - 45*24*3600*1000; // 先放宽到 45 天，避免被时间窗误删
          let items = [];

          for(const s of RSS_SOURCES){
            console.log('> fetch', s.name);
            const xml = await tryFetchText(s.url);
            if(!xml){ console.log('  -> 0'); continue; }
            const arr = parseRSS(xml, 120).map(it=>({
              title: it.title,
              url: it.url,
              date: new Date(Date.parse(it.date||"") || Date.now()).toISOString(),
              source: s.name,
              bucket: s.bucket
            }));
            console.log('  ->', arr.length);
            items = items.concat(arr);
          }

          // 去重 + 时间过滤 + 排序 + 截断
          const seen = new Set();
          items = items.filter(x=>{
            const k=(x.url||'').split('#')[0];
            if(!k || seen.has(k)) return false; seen.add(k); return true;
          }).filter(x=> Date.parse(x.date||'') >= cutoff)
            .sort((a,b)=> Date.parse(b.date)-Date.parse(a.date))
            .slice(0, 1000);

          const fs = await import('fs/promises');
          await fs.writeFile('feed.json', JSON.stringify({ ts:Date.now(), items }, null, 2));
          console.log('TOTAL:', items.length);
          NODE

      - name: Commit feed.json
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add feed.json
          git commit -m "update feed.json" || echo "no changes"
          git push
